@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Infrastructure.AFC.Infrastructure.Database.Entities;
@using SignalRChatRoom.Server.Models;
@using Group = SignalRChatRoom.Server.Models.Group;
@using DbGroup = Infrastructure.AFC.Infrastructure.Database.Entities.Group;
@using Client = SignalRChatRoom.Server.Models.Client;
@using System.Text.RegularExpressions
@implements IAsyncDisposable

@rendermode InteractiveServer

<PageTitle>Chat Room</PageTitle>
<!-- #region [style] -->
<style>
    /* main-container {
                        font-family: Arial, sans-serif;
                        margin: 0;
                        padding: 0;
                        } */

    main {
        overflow-x: auto;
    }

    .container {
        display: inline-flex;
    }

    .users {
        width: 200px;
        background-color: #f2f2f2;
        padding: 20px;
        border: 1px solid #e0e0e0;
        box-sizing: border-box;
    }

        .users h3 {
            margin-top: 0;
            padding: 10px;
        }

        .users ul {
            list-style-type: none;
            overflow-y: auto;
            max-height: 330px;
            padding: 0;
        }

        .users .user {
            cursor: pointer;
            padding: 10px;
            margin-bottom: 5px;
            background-color: #e0e0e0;
        }

            .users .user.active {
                background-color: #ffff;
            }

    .user.disabled {
        pointer-events: none; /* Tıklanabilirliği devre dışı bırakır */
        opacity: 0.5; /* Devre dışı bırakılmış gibi bir görünüm sağlar */
    }

    .conversation {
        flex: 1;
        padding: 20px;
        border: 1px solid #e0e0e0;
        box-sizing: border-box;
        min-width: 400px;
    }

        .conversation .header {
            background-color: #e0e0e0;
            padding: 10px;
            margin-bottom: 20px;
        }

    .messages {
        overflow-y: auto;
        max-height: 400px;
        min-height: 400px;
    }

    .message {
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        /* max-width: 70%; */
        max-width: max-content;
    }

    .sent {
        background-color: #DCF8C6;
        align-self: flex-end;
        margin-right: 0px !important;
        margin-left: auto; /* flexbox alignment rule */
    }

    .received {
        background-color: #ECE5DD;
    }

    .time, .sender {
        font-size: 12px;
        color: #666;
    }

    button, input, optgroup, select, textarea {
        margin: 0;
        font-family: inherit;
        font-size: inherit;
        line-height: inherit;
        max-width: -webkit-fill-available;
    }

    .input-area {
        margin-top: 20px;
    }

        .input-area input {
            width: calc(100% - 80px);
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px 0 0 5px;
        }

        .input-area button {
            width: 70px;
            padding: 10px;
            background-color: #4CAF50;
            color: #fff;
            border: none;
            border-radius: 0 5px 5px 0;
            cursor: pointer;
            float: right;
        }

            .input-area button:hover {
                background-color: #45a049;
            }

    .addGroup {
        margin-top: 10px;
        /* background-color: #e0e0e0; */
        /* border: none; */
        /* border-radius: 0 5px 5px 0; */
    }
</style>
<!-- #endregion -->
<!-- #region [html] -->
@if (!IsAuthenticate)
{
    <Toasts class="p-3" Messages="AuthenticationMessages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />

    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <Card Color="CardColor.Light" Class="mb-4" Style="width:18rem;">
            <CardHeader class="text-center">Chat Room</CardHeader>
            <CardBody>
                <CardTitle class="mx-auto text-center">Authorization</CardTitle>
                <InputText class="mx-auto" style="padding: 10px 10px 10px 5px; display: block; width: w-auto; border: none; border-bottom: 1px solid #757575;" @bind-value="CallerUsername" placeholder="Username"></InputText>
                <InputText class="mx-auto" style="padding: 10px 10px 10px 5px; display: block; width: w-auto; border: none; border-bottom: 1px solid #757575;" @bind-Value="RoomId" placeholder="Room Id"></InputText>
                <span class="align-items-center w-100">
                    <Button class="addGroup" style="margin-left: 30%" Color="ButtonColor.Primary" @onclick=SignIn> Authorize </Button>
                </span>
            </CardBody>
        </Card>
    </div>
}
else
{
    @* <div class="main-container"> *@

    <Toasts class="p-3" Messages="NotificationMessages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />


    <div class="container">

        @* Sistemdeki odalar/gruplar listeleniyor.. *@
        @* <div class="users" onloadstart=(() =>
            )>
            <div>
                <input class="mx-auto position-relative" style="max-width: -moz-available; padding: 10px 10px 10px 5px; display: block; border: none; border-bottom: 1px solid #757575;" type="text" @bind-value="GroupNameText" placeholder="Номер комнаты">
                <Button class=" mx-auto addGroup" Color="ButtonColor.Primary"> Перейти в комнату </Button> *@
        @* @onclick=@(() => AddGroup(GroupNameText)) *@
        @* </div> *@
        @* <h3>Номера</h3> *@
        @* <ul>
                @foreach (var group in Groups)
                {
                    <Tooltip Class="me-4" Title="Нажмите, чтобы ввести комнату и просмотреть участников." Placement="TooltipPlacement.Right">
                        <li class="user @(group == selectedGroup ? "active" : "")" @onclick="@(() => SelectGroup(group))">@group.GroupName</li>
                    </Tooltip>
                }
            </ul>
        </div> *@
        @* Отобразятся клиенты, включенные в выбранную комнату/группу... *@
        @*         <div class="users" style="display: @displayStyle">
            @if (!string.IsNullOrEmpty(selectedGroup.GroupName))
            {
                <h3>@selectedGroup.GroupName В группе </h3>
                <ul>
                    @foreach (var client in ClientsOfGroups)
                    {
                        <li class="user disabled">@client.Username</li>
                    }
                </ul>
            }
        </div> *@

        @* Клиенты в системе перечислены.. *@
        <div class="users min-vw-10">
            <h4 class="mx-auto">Все пользователи:</h4>
            <ul>
                @foreach (var client in ClientsOfGroups)
                {
                    <li class="user disabled">@client.Username</li>
                }
            </ul>
        </div>

        @* В списке отображаются сообщения вызывающего абонента с выбранными клиентами.. *@
        <div class="conversation">
            @if (selectedClient.Username != null)
            {
                <div class="header">
                    <h3>@selectedClient.Username</h3>
                </div>
            }
            else if (selectedGroup.GroupName != null)
            {
                <div class="header">
                    <h3>@selectedGroup.GroupName</h3>
                </div>
            }
            <div class="messages">
                @*  @for (int i = 0; i < SelectedUserMessages.Count; i++)
                {
                    <div class="message @(SelectedUserMessages[i].IsSenderReceiver ? "sent" : "received")">
                        @if (SelectedUserMessages[i].IsGroupMessage && !SelectedUserMessages[i].IsSenderReceiver)
                        {
                            <span class="sender">Отправитель : @SelectedUserMessages[i].SenderClientUsername</span>
                        }
                        <p>@SelectedUserMessages[i].Message</p>
                        <span class="time">@SelectedUserMessages[i].CreatedDate.ToShortTimeString()</span>
                    </div>
                } *@

                @for (int i = 0; i < MessageHistory?.Count; i++)
                {
                    <div class="message @(MessageHistory[i].Username == CallerUsername ? "sent" : "received")">

                        <span class="sender">Отправитель : @MessageHistory[i].Username</span>
                        <p>@MessageHistory[i].Text</p>
                        <span class="time">@MessageHistory[i].DateTime.ToLocalTime()</span>
                    </div>
                }
            </div>
            <div class="input-area">
                <input @onkeyup="@(e => KeyHandler(e))" type="text" @bind-value="TextMessage" placeholder="Напишите здесь свое сообщение ..">
                @* <input style="max-width:50px" type="file" onchange=@LoadFileFromUser   placeholder=".."> *@
                <InputFile @ref="_inputFile" OnChange="LoadFileFromUser" accept=".jpg, .jpeg, png"></InputFile>
                <button @onclick=@(() => SendMessageAsync(TextMessage, RoomId))>Отправить</button>
            </div>
            <div>
                @if (isLoading)
                {
                    <p>Uploading...</p>
                }
                else
                {
                    <ul>
                        @foreach (var file in loadedFiles)
                        {
                            <li>
                                <ul>
                                    <li>Name: @file.Name</li>
                                    <li>Last modified: @file.LastModified.ToString()</li>
                                    <li>Size (bytes): @file.Size</li>
                                    <li>Content type: @file.ContentType</li>
                                </ul>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
    @* </div> *@
}
<!-- #endregion -->
<!-- #region [code] -->
@code {
    #region [variables]
    const byte maxAllowedFiles = 3;

    /// <summary>
    /// Установлено значение в 3 МБ
    /// </summary>
    const long maxFileSize = 3145728;

    /// <summary>
    /// Запрещены ссылки, тайские телефоны и логины из мессенджеров и соц сетей
    /// </summary>
    const string pattern = @"([a-z]+:\/\/)|((([a-z0-9\-]+\.)+([a-z]2}|aero|arpa|biz|com|coop|edu|gov|info|int|jobs|mil|museum|me|name|nato|net|org|pro|travel|local|internal|ad|ae|af|ag|ai|al|am|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bl|bm|bn|bo|bq|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mf|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|ss|st|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw))(:[0-9]{1,5})?(\/[a-z0-9_\-\.~]+)*(\/([a-z0-9_\-\.]*)(\?[a-z0-9+_\-\.%=&amp;]*)?)?(#[a-zA-Z0-9!$&'()*+.=-_~:@\/?]*)?)(\s+|$)/|(@(\w+)?(\d+)?)|(\+? ?66 ?(\d+))|(0 ?(\d+)?)";

    private string displayStyle = "none"; // clientsOfGroupu Видимость поля со списком изначально скрыта.
    private List<ToastMessage> NotificationMessages = new List<ToastMessage>();
    private List<ClientMessage> Messages = new List<ClientMessage>(); // Clientla alakalı mesajları tutacak olan liste..
    private List<Message> MessageHistory = new();
    private HubConnection? hubConnection;
    private List<ToastMessage> AuthenticationMessages = new List<ToastMessage>();
    private List<ClientMessage> SelectedUserMessages = new List<ClientMessage>();
    private Client selectedClient = new Client();
    private Group selectedGroup = new Group();
    private bool isLoading = false;
    private List<IBrowserFile> loadedFiles = new();
    #endregion

    #region [properties]
    private string CallerUsername { get; set; } = String.Empty; // Kişinin login olurken girdiği username bilgisi..
    /// <summary>
    /// ID чата который ввёл пользователь
    /// </summary>
    private string RoomId { get; set; } = String.Empty; // Id комнаты, в которую должен войти пользователь

    /// <summary>
    /// Отправляемое пользователем сообщение
    /// </summary>
    private string TextMessage { get; set; } = String.Empty; // Gönderilecek mesaj
    private InputFile? _inputFile { get; set; }
    private ElementReference previewImageElement;

    string groupNameText = String.Empty;
    public string GroupNameText
    {
        get { return groupNameText; }
        set { groupNameText = GroupId.ToString(); }
    }

    Guid groupId = Guid.Empty;
    public Guid GroupId
    {
        get { return groupId; }
        set
        {
            groupId = value;
            groupNameText = groupId.ToString();
        }
    }

    /// <summary>
    /// Выполнен ли вход в чат под логином
    /// </summary>
    public bool IsAuthenticate { get; set; } = false;

    private List<Client> ClientsOfGroups { get; set; } = new List<Client>();
    private List<Client> Clients { get; set; } = new List<Client>();
    private List<Server.Models.Group> Groups { get; set; } = new List<Server.Models.Group>();
    #endregion

    class ClientMessage()
    {
        public string ReceiverClientUsernameOrGroupName { get; set; } = string.Empty;
        public string SenderClientUsername { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public bool IsGroupMessage { get; set; } = false;
        public bool IsSenderReceiver { get; set; } = false;
        public DateTime CreatedDate { get; set; } = DateTime.Now;
    }

    protected override async Task OnInitializedAsync()
    {
        // SignalR hubına bağlantı oluşturur..
        hubConnection = new HubConnectionBuilder()
        .WithUrl("http://localhost:5295/chathub") // Bağlanılacak hub URLini belirler..
        .Build();

        // Sunucudan gelen bildirileri işler..

        // Sisteme yeni bir kullanıcı dahil olduğunda tüm clientlara bildirecek.. Server tarafından tetikleniyor..
        hubConnection.On<string>("clientJoined", async (username) =>
        {
            NotificationMessages.Add(CreateToastMessage(ToastType.Info, $"{username} Присоединился."));

            await InvokeAsync(StateHasChanged); // UI güncellemesi için InvokeAsync metodu çağırılıyor..
        });

        // Sistemdeki bir kullanıcı bağlantıyı kopardığı zaman tetiklenecek.. Server tarafından tetikleniyor..
        hubConnection.On<string>("clientLeaved", async (username) =>
        {
            NotificationMessages.Add(CreateToastMessage(ToastType.Info, $"{username} Покинул"));

            await InvokeAsync(StateHasChanged); // UI güncellemesi için InvokeAsync metodu çağırılıyor..
        });

        // Sistemdeki clientların listesi güncellendiğinde (client giriş çıkışlarında) server tarafından tetiklenerek güncel liste alınacak..
        hubConnection.On<List<Client>>("clients", async (clientList) =>
        {
            Clients = clientList;
            await InvokeAsync(StateHasChanged); // UI güncellemesi..
        });

        // Sistemdeki bir gruba ait clientların listesi güncellendiğinde (client giriş çıkışlarında) server tarafından tetiklenerek güncel liste alınacak..
        hubConnection.On<List<Client>, string>("clientsOfGroup", async (clientList, groupName) =>
        {
            // Client çıkışı olduğu zaman clientı subscribe olduğu tüm gruplardan çıkarırken hepsinin listesi güncellenerek clientlara iletiliyor..
            // Dolayısıyla clientın seçili grubu başkasıyken son grup hangisiyse onun client listesi görünebiliyor..
            // Bu sebepten ötürü clientın seçtiği grup parametrede gelen gruba eşit olduğunda liste güncelleniyor..
            if (selectedGroup.GroupName == groupName)
            {
                ClientsOfGroups = clientList;
                await InvokeAsync(StateHasChanged); // UI güncellemesi..
            }
        });

        // Sisteme yeni bir oda/grup eklendiğinde tüm clientlara bildirecek.. Server tarafından tetikleniyor..
        hubConnection.On<Group>("groupAdded", async (group) =>
        {
            NotificationMessages.Add(CreateToastMessage(ToastType.Info, $"{group.GroupName} adında yeni bir oda oluşturuldu."));
            await InvokeAsync(StateHasChanged); // UI güncellemesi için InvokeAsync metodu çağırılıyor..
        });

        // Sistemdeki grupların/odaların listesi güncellendiğinde server tarafından tetiklenerek güncel liste alınacak..
        hubConnection.On<List<Group>/* , Group, List<Client> */>("groups", (groupList/* , currGroup, clients */) =>
        {
            // var tempgroup = groupList.Find(Group => Group.GroupName == currGroup.GroupName);
            // foreach (var client in clients)
            //     tempgroup.Clients.Add(client);

            // groupList.Find(Group => Group.GroupName == currGroup.GroupName).Clients.AddRange(tempgroup.Clients);
            Groups = groupList;
            InvokeAsync(StateHasChanged).Wait(); // UI güncellemesi..
        });

        hubConnection.On<Group>("selectGroup", (groupList/* , currGroup, clients */) =>
        {
            selectedGroup = groupList;
            InvokeAsync(StateHasChanged).Wait(); // UI güncellemesi..
        });

        hubConnection.On<string, Client, Client?, string?>("receiveMessage", async (message, senderClient, client, groupName) =>
       {
           // Bir clientla mesajlaşılıyorsa..
           if (client != null)
           {
               var tempGroup = FindGroupByName(groupName);

               DbGroup dbGroup = new() { Id = Guid.Parse(tempGroup.GroupName), Name = tempGroup.GroupName, Members = (ICollection<User>)tempGroup.Clients };
               MessageHistory.Add(new Message() { Id = Guid.NewGuid(), Username = client.Username, Group = dbGroup, Text = message, DateTime = DateTime.Now });
               // Clienta gönderilen mesajları tutan listeye mesaj ekleniyor..
               // Messages.Add(new ClientMessage() { ReceiverClientUsernameOrGroupName = client.Username, SenderClientUsername = senderClient.Username, Message = message });

               // Seçilen clientın usernameine göre o clientla olan mesajlaşmaları filtreleyerek SelectedUserMessages listesine atar..
               FilterUserMessages(selectedClient.Username, false);
               await InvokeAsync(StateHasChanged); // UI güncellemesi..
           }
           else if (!string.IsNullOrEmpty(groupName))// Grup ile mesajlaşıyorsa..
           {
               // Clientın grupla mesajlaşmaları Message listesine ekleniyor..
               Messages.Add(new ClientMessage() { ReceiverClientUsernameOrGroupName = groupName, SenderClientUsername = senderClient.Username, Message = message, IsGroupMessage = true, IsSenderReceiver = (senderClient.Username == CallerUsername) ? true : false });

               // Seçilen grubun adına göre gruptaki mesajlaşmaları filtreleyerek SelectedUserMessages listesine atar..
               FilterUserMessages(groupName, true);
               await InvokeAsync(StateHasChanged); // UI güncellemesi..
           }
       });

        // Bir callerın sistemdeki herhangi bir clienta mesaj atma durumunda server tarafından tetiklenecek..
        hubConnection.On<string, string, Client?, string?, DbGroup?>("receiveMessage2", async (message, senderClientName, client, groupName, dbGroup) =>
        {
            if (dbGroup.Id == Guid.Empty || dbGroup is null)
            {
                Group tempGroup = FindGroupByName(groupName);
                if (tempGroup is not null)
                    dbGroup = new() { Id = Guid.Parse(tempGroup.GroupName), Name = tempGroup.GroupName, Members = (ICollection<User>)tempGroup.Clients };
            }
            MessageHistory.Add(new Message() { Id = Guid.NewGuid(), Username = senderClientName, Group = dbGroup, Text = message, DateTime = DateTime.Now });

            // FilterUserMessages(selectedClient.Username, false);
            await InvokeAsync(StateHasChanged); // UI güncellemesi..
        });

        hubConnection.On<List<Message>>("LoadMessagesFromDb", async (messageHistory) =>
        {
            MessageHistory = messageHistory;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("WarningToUser", async (text) =>
        {
            NotificationMessages.Add(CreateToastMessage(ToastType.Warning, text));
        });

        await hubConnection.StartAsync(); // Hub bağlantısını başlatır..

        await hubConnection.SendAsync("GetClientsAsync"); // Kullanıcı giriş yaptığında tüm clientların listesini çeker.. (Client serverı tetikliyor..)
    }

    /// <summary>
    /// Проверяет, что имя пользователя не занято
    /// </summary>
    /// <param name="username">имя введённое пользователем</param>
    /// <param name="groupId">чат к которому он подключается</param>
    /// <returns>true если этот юзернейм можно использовать</returns>
    public bool IsUsernameTaken(string username, string groupId)
    {
        Group? group = FindGroupByName(groupId);
        Client? client = group?.Clients.FirstOrDefault(client => client.Username == username);

        return client == null;
    }

    /// <summary>
    /// Проверяет занят ли ID чата
    /// </summary>
    /// <param name="groupName">ID чата</param>
    /// <returns>true если ID свободен</returns>
    public bool CheckGroupName(string groupName)
    {
        Group? group = FindGroupByName(groupName);

        return group == null;
    }

    /// <summary>
    /// Процесс входа в систему
    /// </summary>
    async Task SignIn()
    {

        if (!(string.IsNullOrEmpty(CallerUsername) && string.IsNullOrEmpty(RoomId)))
        {
            if (IsUsernameTaken(CallerUsername, RoomId)) // Вход успешно
            {
                // Запускаемый пользовательским входом путем запуска метода getUsernameasync на сервере, метод, связанный с клиентом в клиенте, запускается всем клиентам, за исключением абонента и аналогичного списка клиентов обновляется..
                await hubConnection.SendAsync("AddGroupAndUserToAppAndDb", CallerUsername, RoomId);
                GroupId = Guid.Parse(RoomId);
                Group? tempGroup = FindGroupByName(RoomId);

                IsAuthenticate = true;

                await InvokeAsync(StateHasChanged); // UI обновление ..
            }
            else
            {
                // Предупреждение о том, что имя пользователя используется.
                AuthenticationMessages.Add(new ToastMessage()
                    {
                        Type = ToastType.Warning,
                        Title = "Вход не удался",
                        HelpText = $"{DateTime.Now}",
                        Message = $"Имя пользователя уже занято!",
                    });
            }
        }

    }

    /// <summary>
    /// Список, который будет держать сообщения, связанные с выбранным клиентом и вызывающим абонентом
    /// </summary>
    // Messsages listesinden parametrede gelen clientın attığı ve o usernamee atılan mesajları filtreler..
    void FilterUserMessages(string receiverClientNameOrGroupName, bool IsGroupMessage)
    {
        if (IsGroupMessage)
        {
            // Eğer selectedGroup null değilse ve seçili olan grubun adı parametredeki değere eşitse filtreleme yapacak..
            if (selectedGroup.GroupName == null ? false : selectedGroup.GroupName.Equals(receiverClientNameOrGroupName) ? true : false)
            {
                SelectedUserMessages = Messages.Where(msg => (msg.ReceiverClientUsernameOrGroupName == receiverClientNameOrGroupName || msg.SenderClientUsername == receiverClientNameOrGroupName) && msg.IsGroupMessage).ToList();
            }
        }
        else
        {
            // Eğer kullanıcı bir userı seçmişse yani selectedClient değeri null değilse ve parametredeki değer ile aynıysa filtreleme yapacak..
            if (selectedClient.Username == null ? false : selectedClient.Username.Equals(receiverClientNameOrGroupName) ? true : false)
            {
                SelectedUserMessages = Messages.Where(msg => (msg.ReceiverClientUsernameOrGroupName == receiverClientNameOrGroupName || msg.SenderClientUsername == receiverClientNameOrGroupName) && !msg.IsGroupMessage).ToList();
            }
        }
    }

    private void SelectClient(Client client)
    {
        // Mesaj gönderilecek client bilgisi selectedClienta atanıyor..
        selectedClient = client;
        selectedGroup = new Group();
        // Seçilen clientın usernameine göre o clientla olan mesajlaşmaları filtreleyerek SelectedUserMessages listesine atar..
        FilterUserMessages(client.Username, false);
    }

    private async Task SelectGroupAsync(Group group)
    {
        // Mesaj gönderilecek grup bilgisi selectedGroupa atanıyor..
        selectedGroup = group;
        selectedClient = new Client();
        // await AddClientToGroup(selectedGroup.GroupName);

        await GetClientsOfGroup(selectedGroup.GroupName);

        displayStyle = displayStyle == "none" ? "block" : "none"; // Bir gruba/odaya ait clientları listeleyen alanın görünürlüğünü değiştirir..

        // Seçilen grubun GroupNameine göre o grupla olan mesajlaşmaları filtreleyerek SelectedUserMessages listesine atar..
        FilterUserMessages(group.GroupName, true);
    }

    /// <summary>
    /// Метод загрузкки файлов выбранных пользователем и передача их на сервер для хранения и синронизации с чатом.
    /// </summary>
    /// <param name="e">Объект работы со всеми файлами пользователя</param>
    /// <remarks>Может быть от 0 до 3 файлов, каждый размером не больше 3МБ</remarks>
    private async Task LoadFileFromUser(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            isLoading = true;
            loadedFiles.Clear();

            try
            {
                var trustedFileName = Path.GetRandomFileName();
                var path = Path.Combine(Directory.GetCurrentDirectory(),
                                        Environment.UserName,
                                        "unsafe_uploads");
                Directory.CreateDirectory(path);
                path = Path.Combine(path,
                    trustedFileName);

                await using FileStream fs = new(path, FileMode.Create);

                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                if (file.Size > maxFileSize)
                    NotificationMessages.Add(CreateToastMessage(ToastType.Warning, $"Максимальный размер файла 3МБ"));
                else
                    loadedFiles.Add(file);

            }
            catch (Exception ex)
            {
                NotificationMessages.Add(CreateToastMessage(ToastType.Warning, $"Возникла ошибка при загрузке изображений: {ex}"));
            }

        }

        await hubConnection.SendAsync("GetFilesToServer", loadedFiles, selectedGroup.GroupName, selectedClient.Username);
        isLoading = false;
        NotificationMessages.Add(CreateToastMessage(ToastType.Info, $"Файл загружен"));
    }

    // Caller bir clienta ya da tüm clientlara mesaj gönderecekse serverı tetikler..
    private async Task SendMessageAsync(string message, string groupName)
    {
        if (isHaveRestrictedSymbols(message))
            NotificationMessages.Add(CreateToastMessage(ToastType.Info, $"В сообщениях нельзя отправлять ссылки и контакты"));
        else
        {
            // Mesaj yazmadan butona tıklanırsa kodlar çalışmayacak..
            if (!string.IsNullOrEmpty(message) && !string.IsNullOrEmpty(groupName))
            {
                // Grup adı varsa ilgili gruba mesaj gönderilecek..
                // Serverdaki SendMessageAsync methodu tetiklenerek seçilen gruba mesajın gönderilme işlemi gerçekleştiriliyor..
                await hubConnection.SendAsync("SendMessageToGroupAsync", groupName, message, CallerUsername);

                // Seçilen grubun adına göre o gruptaki mesajlaşmaları filtreleyerek SelectedUserMessages listesine atar..
                // FilterUserMessages(groupName, true);
                StateHasChanged();
                // Mesaj temizleniyor..
                TextMessage = string.Empty;
            }
        }
    }

    /// <summary>
    /// Проверка на наличие в сообщении ссылок или контактной инфрмации для связи вне чата
    /// </summary>
    /// <param name="userInput">Сообщение пользователя</param>
    /// <returns>true если имеется ли запрещённый текст в сообщении</returns>
    private bool isHaveRestrictedSymbols(string userInput)
    {
        return Regex.IsMatch(userInput, pattern, RegexOptions.IgnoreCase, TimeSpan.FromSeconds(2));
    }


    // Caller bir oda oluştururken tetiklenir..
    private async Task AddGroup(string groupNameText)
    {
        // Grup adı yazmadan butona tıklanırsa kodlar çalışmayacak..
        if (!string.IsNullOrEmpty(groupNameText))
        {
            bool result = CheckGroupName(groupNameText);
            if (result) // Oda adı kullanılabilirse..
            {
                // Serverdaki AddGroupAsync methodu tetiklenerek grup oluşturma işlemi gerçekleştiriliyor..

                await hubConnection.SendAsync("AddGroupAsync", Guid.NewGuid());

                // Grup oluşturma inputu temizleniyor..
                groupNameText = string.Empty;
            }
            else
            {
                // Usernamein kullanımda olduğuna dair uyarı verilecek..
                NotificationMessages.Add(new ToastMessage()
                    {
                        Type = ToastType.Warning,
                        Title = "İşlem Başarısız",
                        HelpText = $"{DateTime.Now}",
                        Message = $"Bu isimde bir oda zaten var!",
                    });
            }
        }
    }

    // Caller bir odaya girerken tetiklenir..
    private async Task AddClientToGroup(string groupId)
    {
        // Serverdaki AddClientToGroupAsync methodu tetiklenerek seçilen gruba callerın dahil olması sağlanıyor..
        await hubConnection.SendAsync("AddClientToGroupAsync", groupId);
    }

    // Tetiklendiğinde ilgili gruba ait tüm clientların listesini döndürür....
    private async Task GetClientsOfGroup(string groupId)
    {
        // Serverdaki GetClientsOfGroupAsync methodu tetiklenerek seçilen gruba subscribe olmuş tüm clientların listesini döndürür ve server tarafından clienttaki clients methodu tetiklenir..
        await hubConnection.SendAsync("GetClientsOfGroupAsync", groupId);
    }

    // Mesaj yazılan inputta Entera basılırsa SendMessageAsync fonksiyonunu tetikler..
    private async Task KeyHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessageAsync(TextMessage, selectedGroup.GroupName);
        }
    }

    // hubConnection nesnesinin kullanımı sona erdiğinde temizleniyor..
    public async ValueTask DisposeAsync()
    {
        // hubConnection nesnesi null değilse (yani tanımlanmışsa)
        if (hubConnection is not null)
        {
            // hubConnection nesnesini temizleme işlemi yapılıyor ve bağlantı kaynakları serbest bırakılıyor..
            await hubConnection.DisposeAsync();
        }
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Kullanıcı Girişi",
            HelpText = $"{DateTime.Now}",
            Message = $"{message}",
        };

    /// <summary>
    /// Загружает историю сообщений чата из БД в память для отображжения
    /// </summary>
    /// <param name="groupId">ID чата</param>
    private async Task LoadMessageHistory(string groupId)
    {
        var group = FindGroupByName(groupId);
        if (group?.MessageHistory != null)
            MessageHistory = group?.MessageHistory;
        await hubConnection.SendAsync("GetDbMessagesHistorySortByDecAsync", Guid.Parse(groupId));
    }

    /// <summary>
    /// Ищет чат в массиве по его ID
    /// </summary>
    /// <param name="groupId">ID чата</param>
    /// <returns>Найденная сущность Group</returns>
    private Group? FindGroupByName(string groupId)
    {
        List<Group> groups = Groups.FindAll(group => group.GroupName == groupId);
        // var group = Groups.FirstOrDefault(group => group.GroupName == groupName);
        Group group = groups.FirstOrDefault(tempgroup => tempgroup.Clients.Count > 0);
        return group;
    }
}
<!-- #endregion -->
